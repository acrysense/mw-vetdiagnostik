"use strict";

document.addEventListener('DOMContentLoaded', function () {
  // Initialize a new Lenis instance for smooth scrolling
  // const lenis = new Lenis({
  //     lerp: 0.15,
  //     smooth: true
  // })

  // function raf(time) {
  //     lenis.raf(time)
  //     requestAnimationFrame(raf)
  // }

  // requestAnimationFrame(raf)

  //     const horizontalContent = document.querySelector('.footer-nav__list');
  // const sectionWidth = horizontalContent.scrollWidth;
  // const windowWidth = window.innerWidth;
  // const windowHeight = window.innerHeight;

  // const offset = 200; // Начальное смещение, чтобы видеть первый пункт
  // const startOffset = 0; // Начальный порог прокрутки

  // let isInView = false; // Флаг для отслеживания видимости блока
  // let startScrollY = 0; // Переменная для отслеживания начальной позиции блока

  // // Используем Intersection Observer для отслеживания появления блока в области видимости
  // const observer = new IntersectionObserver((entries) => {
  //     entries.forEach(entry => {
  //         if (entry.isIntersecting) {
  //             isInView = true;
  //             startScrollY = window.scrollY; // Запоминаем начальную позицию скролла
  //         } else {
  //             isInView = false;
  //         }
  //     });
  // }, { threshold: 0.1 });

  // observer.observe(horizontalContent);

  // const lenis = new Lenis({
  //     lerp: 0.15,
  //     smooth: true
  // });

  // function raf(time) {
  //     lenis.raf(time);
  //     requestAnimationFrame(raf);
  // }

  // requestAnimationFrame(raf);

  // lenis.on('scroll', () => {
  //     if (!isInView) return; // Если блок не в видимости, не запускаем прокрутку

  //     const scrollProgress = lenis.scroll; // Получаем текущую прокрутку из Lenis
  //     const maxScroll = document.documentElement.scrollHeight - windowHeight; // Максимальная прокрутка
  //     const scrollRatio = scrollProgress / maxScroll; // Пропорция прокрутки

  //     // Корректируем движение по оси X с учетом ширины контента и окна
  //     let moveX = -(sectionWidth - windowWidth) * scrollRatio + startOffset;

  //     // Ограничиваем движение, чтобы последний пункт не выходил за пределы видимости
  //     if (moveX > 0) {
  //         moveX = 0; // Не разрешаем двигаться вправо за пределы
  //     } else if (moveX < -(sectionWidth - windowWidth)) {
  //         moveX = -(sectionWidth - windowWidth); // Не разрешаем двигаться влево за пределы
  //     }

  //     // Применяем смещение для движения
  //     horizontalContent.style.transform = `translateX(${moveX}px)`;
  // });

  // function's
  function bodyFixScroll(status) {
    var scrollPosition = 0;
    var paddingOffset = window.innerWidth - document.body.offsetWidth + 'px';
    var elementsFixed = document.querySelectorAll('.fixed');
    if (status) {
      document.body.classList.add('scroll-disabled');
      scrollPosition = window.pageYOffset;
      document.body.style.overflow = 'hidden';
      document.body.style.position = 'fixed';
      if (document.body.style.top) {
        document.body.style.top = document.body.style.top;
      } else {
        document.body.style.top = '-' + scrollPosition + 'px';
      }
      document.body.style.width = '100%';
      document.body.style.paddingRight = paddingOffset;
      if (elementsFixed) {
        elementsFixed.forEach(function (item) {
          item.style.marginRight = paddingOffset;
        });
      }
    } else {
      document.body.classList.remove('scroll-disabled');
      scrollPosition = Math.abs(parseInt(document.querySelector('body').style.top.replace('px', '')));
      document.body.style.removeProperty('overflow');
      document.body.style.removeProperty('position');
      document.body.style.removeProperty('top');
      document.body.style.removeProperty('width');
      document.body.style.removeProperty('padding-right');
      if (elementsFixed) {
        elementsFixed.forEach(function (item) {
          item.style.removeProperty('margin-right');
        });
      }
      window.scrollTo({
        top: !isNaN(scrollPosition) ? scrollPosition : 0,
        behavior: 'instant'
      });
    }
  }
  function hexToRgb(hex) {
    hex = hex.replace(/^#/, '');
    if (hex.length === 3) {
      hex = hex.split('').map(function (_char) {
        return _char + _char;
      }).join('');
    }
    var r = parseInt(hex.substring(0, 2), 16);
    var g = parseInt(hex.substring(2, 4), 16);
    var b = parseInt(hex.substring(4, 6), 16);
    return "".concat(r, ", ").concat(g, ", ").concat(b);
  }

  // checker
  var useItemChecker = function useItemChecker(els, onClickOutside) {
    var checkBodyClick = function checkBodyClick(e) {
      var currentEl = e.target;
      while (currentEl) {
        if (els.includes(currentEl)) break;
        currentEl = currentEl.parentNode;
      }
      if (!currentEl) {
        onClickOutside();
        removeBodyChecker();
      }
    };
    function setBodyChecker() {
      document.documentElement.addEventListener('click', checkBodyClick);
    }
    function removeBodyChecker() {
      document.documentElement.removeEventListener('click', checkBodyClick);
    }
    return {
      setBodyChecker: setBodyChecker,
      removeBodyChecker: removeBodyChecker
    };
  };

  // slides up/down/toggle
  var slideUpQna = function slideUpQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.transitionProperty = 'height, margin, padding';
    target.style.transitionDuration = duration + 'ms';
    target.style.height = target.offsetHeight + 'px';
    target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    if (target.previousElementSibling) {
      target.previousElementSibling.style.pointerEvents = 'none';
    }
    window.setTimeout(function () {
      target.style.display = 'none';
      target.style.removeProperty('height');
      target.style.removeProperty('padding-top');
      target.style.removeProperty('padding-bottom');
      target.style.removeProperty('margin-top');
      target.style.removeProperty('margin-bottom');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      if (target.previousElementSibling) {
        target.previousElementSibling.style.pointerEvents = 'auto';
      }
    }, duration);
    target.parentNode.classList.remove('is--open');
  };
  var slideDownQna = function slideDownQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.removeProperty('display');
    var display = window.getComputedStyle(target).display;
    if (display === 'none') display = 'block';
    target.style.display = display;
    var height = target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    target.offsetHeight;
    target.style.transitionProperty = "height, margin, padding";
    target.style.transitionDuration = duration + 'ms';
    target.style.height = height + 'px';
    target.style.removeProperty('padding-top');
    target.style.removeProperty('padding-bottom');
    target.style.removeProperty('margin-top');
    target.style.removeProperty('margin-bottom');
    if (target.previousElementSibling) {
      target.previousElementSibling.style.pointerEvents = 'none';
    }
    window.setTimeout(function () {
      target.style.removeProperty('height');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      if (target.previousElementSibling) {
        target.previousElementSibling.style.pointerEvents = 'auto';
      }
    }, duration);
    target.parentNode.classList.add('is--open');
  };
  var slideToggleQna = function slideToggleQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    if (window.getComputedStyle(target).display === 'none') {
      return slideDownQna(target, duration);
    } else {
      return slideUpQna(target, duration);
    }
  };

  // inputmask
  Inputmask().mask(document.querySelectorAll('input'));

  // textarea
  var allTexareas = document.querySelectorAll('textarea');
  if (allTexareas) {
    allTexareas.forEach(function (el) {
      el.style.height = el.setAttribute('style', 'height: ' + el.scrollHeight + 'px');
      el.classList.add('auto');
      el.addEventListener('input', function (e) {
        el.style.height = 'auto';
        el.style.height = el.scrollHeight + 'px';
      });
    });
  }

  // research
  var researchCards = document.querySelectorAll('.research-card');
  if (researchCards) {
    researchCards.forEach(function (card) {
      card.addEventListener('mouseenter', function () {
        var bgColor = card.getAttribute('data-bg-color');
        document.body.style.backgroundColor = bgColor;
        researchCards.forEach(function (otherCard) {
          if (otherCard !== card) {
            otherCard.classList.add('is--dimmed');
          }
        });
      });
      card.addEventListener('mouseleave', function () {
        document.body.style.removeProperty('background-color');
        researchCards.forEach(function (otherCard) {
          otherCard.classList.remove('is--dimmed');
        });
      });
    });
  }

  // heart
  var heartBtn = document.querySelectorAll('.c-heart__btn');
  if (heartBtn) {
    heartBtn.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (item.classList.contains('is--active')) {
          item.classList.remove('is--active');
        } else {
          item.classList.add('is--active');
        }
      });
    });
  }

  // new select
  if (document.querySelector('.select-box')) {
    // Функция закрытия одиночного селекта
    var closeAllSelects = function closeAllSelects() {
      document.querySelectorAll('.select-box__container').forEach(function (container) {
        container.classList.remove('is--active');
      });
      document.querySelectorAll('.select-box__selected').forEach(function (selected) {
        selected.classList.remove('is--active');
      });
    }; // Обработчик клика по заголовку селекта
    // Функция обновления мультиселекта – отвечает за обновление текста и отображение блока выбранных
    var updateMultiSelect = function updateMultiSelect(selectBox) {
      var selectedBox = selectBox.querySelector('.select-box__selected');
      var selectedPlaceholder = selectedBox.querySelector('.select-box__placeholder');
      var selectedValuesDisplay = selectedBox.querySelector('.select-box__values');
      var selectedSectionWrapper = selectBox.querySelector('.select-box__section--selected');
      var selectedSection = selectedSectionWrapper ? selectedSectionWrapper.querySelector('.select-box__wrap') : null;
      if (selectedSection) {
        var selectedOptions = selectedSection.querySelectorAll('.select-box__option');
        var values = Array.from(selectedOptions).map(function (el) {
          var valueElem = el.querySelector('.select-box__value');
          return valueElem ? valueElem.textContent.trim() : '';
        }).filter(function (val) {
          return val !== '';
        });
        selectedValuesDisplay.textContent = values.join(', ');
        if (values.length > 0) {
          selectedPlaceholder.classList.remove('is--active');
          selectedValuesDisplay.classList.add('is--active');
          selectedSectionWrapper.classList.add('is--active');
          selectedSectionWrapper.style.display = '';
        } else {
          selectedPlaceholder.classList.add('is--active');
          selectedValuesDisplay.classList.remove('is--active');
          selectedSectionWrapper.classList.remove('is--active');
          selectedSectionWrapper.style.display = 'none';
        }
      }
    }; // Обработчик поиска внутри селектбокса
    document.querySelectorAll('.select-box__selected').forEach(function (item) {
      var itemChecker = useItemChecker([item.parentNode, item], closeAllSelects);
      item.addEventListener('click', function () {
        var container = item.previousElementSibling;
        if (container.classList.contains('is--active')) {
          closeAllSelects();
        } else {
          closeAllSelects();
          container.classList.add('is--active');
          item.classList.add('is--active');
          itemChecker.setBodyChecker();
        }
      });
    });
    document.querySelectorAll('.select-box').forEach(function (selectBox) {
      var searchInput = selectBox.querySelector('.select-box__search-input');
      if (searchInput) {
        searchInput.addEventListener('input', function () {
          var query = searchInput.value.trim().toLowerCase();
          // Фильтруем обычные секции (не выбранных)
          selectBox.querySelectorAll('.select-box__section:not(.select-box__section--selected)').forEach(function (section) {
            var sectionMatch = false;
            section.querySelectorAll('.select-box__option').forEach(function (option) {
              var valueElem = option.querySelector('.select-box__value');
              var titleElem = option.querySelector('.select-box__title');
              var valueText = valueElem ? valueElem.textContent.toLowerCase() : '';
              var titleText = titleElem ? titleElem.textContent.toLowerCase() : '';
              if (valueText.indexOf(query) !== -1 || titleText.indexOf(query) !== -1) {
                option.style.display = '';
                sectionMatch = true;
              } else {
                option.style.display = 'none';
              }
            });
            section.style.display = sectionMatch ? '' : 'none';
          });
          // Для секции выбранных – запускаем обновление, чтобы при фильтре, если в ней нет опций, она скрылась
          var selectedSectionWrapper = selectBox.querySelector('.select-box__section--selected');
          if (selectedSectionWrapper) {
            // Не фильтруем опции внутри выбранных – они остаются видимыми, но если их нет, скрываем всю секцию
            updateMultiSelect(selectBox);
          }
        });
      }
    });

    // Обработчик опций для одиночного и мультиселекта
    document.querySelectorAll('.select-box').forEach(function (selectBox) {
      var isSingle = selectBox.classList.contains('select-box--single');
      var container = selectBox.querySelector('.select-box__container');
      var selectedBox = selectBox.querySelector('.select-box__selected');
      var selectedPlaceholder = selectedBox.querySelector('.select-box__placeholder');
      var selectedValuesDisplay = selectedBox.querySelector('.select-box__values');
      var selectedSectionWrapper = selectBox.querySelector('.select-box__section--selected');
      var selectedSection = selectedSectionWrapper ? selectedSectionWrapper.querySelector('.select-box__wrap') : null;
      var options = selectBox.querySelectorAll('.select-box__option');
      options.forEach(function (option) {
        var input = option.querySelector('input');
        var label = option.querySelector('.select-box__label');
        var optionText = isSingle ? label.querySelector('.select-box__title') ? label.querySelector('.select-box__title').textContent.trim() : label.textContent.trim() : option.querySelector('.select-box__value') ? option.querySelector('.select-box__value').textContent.trim() : label.textContent.trim();
        var clone;
        if (!isSingle && selectedSection) {
          clone = option.cloneNode(true);
          clone.setAttribute('data-id', input.id);
          // По клику по клону в секции выбранных снимаем выбор
          clone.addEventListener('click', function (e) {
            e.stopPropagation();
            input.checked = false;
            option.classList.remove('is--active');
            if (selectedSection.contains(clone)) {
              clone.remove();
            }
            updateMultiSelect(selectBox);
          });
        }
        option.addEventListener('click', function (event) {
          event.preventDefault();
          if (isSingle) {
            // Для одиночного селекта – сбрасываем и отмечаем выбранное, не трогая классы для опций
            options.forEach(function (opt) {
              opt.querySelector('input').checked = false;
            });
            input.checked = true;
            selectedValuesDisplay.textContent = optionText;
            selectedPlaceholder.classList.remove('is--active');
            selectedValuesDisplay.classList.add('is--active');
            closeAllSelects();
          } else {
            // Для мультиселекта – переключаем выбор
            if (input.checked) {
              input.checked = false;
              option.classList.remove('is--active');
              var selectedClone = selectedSection.querySelector("[data-id=\"".concat(input.id, "\"]"));
              if (selectedClone) {
                selectedClone.remove();
              }
            } else {
              input.checked = true;
              option.classList.add('is--active');
              if (!selectedSection.querySelector("[data-id=\"".concat(input.id, "\"]"))) {
                selectedSection.appendChild(clone);
              }
            }
            updateMultiSelect(selectBox);
          }
        });
      });

      // Первоначальное обновление для мультиселекта
      if (!isSingle && selectedSectionWrapper) {
        updateMultiSelect(selectBox);
      }
    });
  }

  // search
  var search = document.getElementById('search');
  var searchTrigger = document.querySelectorAll('.c-search__trigger');
  var searchClose = document.getElementById('search-close');
  if (search && searchTrigger && searchClose) {
    searchTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (search.classList.contains('is--active')) {
          search.classList.remove('is--active');
          bodyFixScroll(0);
        } else {
          search.classList.add('is--active');
          if (mobileMenu) {
            setTimeout(function () {
              if (mobileMenu.classList.contains('is--active')) {
                mobileMenuTrigger.classList.remove('is--active');
                mobileMenu.classList.remove('is--active');
              }
            }, 100);
          } else {
            bodyFixScroll(1);
          }
        }
      });
    });
    searchClose.addEventListener('click', function (event) {
      event.preventDefault();
      if (search.classList.contains('is--active')) {
        search.classList.remove('is--active');
        bodyFixScroll(0);
      }
    });
  }

  // mobile menu
  var mobileMenu = document.getElementById('menu');
  var mobileMenuTrigger = document.getElementById('hamburger-toggle');
  var mobileMenuClose = document.getElementById('menu-close');
  if (mobileMenu && mobileMenuTrigger && mobileMenuClose) {
    mobileMenuTrigger.addEventListener('click', function (event) {
      event.preventDefault();
      if (mobileMenu.classList.contains('is--active')) {
        mobileMenuTrigger.classList.remove('is--active');
        mobileMenu.classList.remove('is--active');
        bodyFixScroll(0);
      } else {
        mobileMenuTrigger.classList.add('is--active');
        mobileMenu.classList.add('is--active');
        bodyFixScroll(1);
      }
    });
    mobileMenuClose.addEventListener('click', function (event) {
      event.preventDefault();
      if (mobileMenu.classList.contains('is--active')) {
        mobileMenuTrigger.classList.remove('is--active');
        mobileMenu.classList.remove('is--active');
        bodyFixScroll(0);
      }
    });
  }

  // research inner accrdeon
  var accordeonTrigger = document.querySelectorAll('.research-inner__trigger');
  if (accordeonTrigger) {
    accordeonTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (!item.parentNode.classList.contains('is--open')) {
          slideDownQna(item.nextElementSibling);
        } else {
          slideUpQna(item.nextElementSibling);
        }
      });
    });
  }

  // input file
  var inputFile = document.querySelectorAll('.input-field__input[type="file"]');
  if (inputFile) {
    inputFile.forEach(function (input) {
      var parent = input.closest('.input-field');
      var label = parent.querySelector('.input-field__file-label');
      var file = parent.querySelector('.input-field__file');
      var fileName = parent.querySelector('.input-field__file-name');
      var resetButton = parent.querySelector('.input-field__reset');
      input.addEventListener('change', function () {
        if (this.files.length > 0) {
          fileName.textContent = this.files[0].name;
          label.classList.add('is--hidden');
          file.classList.add('is--active');
        } else {
          fileName.textContent = '';
          label.classList.remove('is--hidden');
          file.classList.remove('is--active');
        }
      });
      resetButton.addEventListener('click', function () {
        input.value = '';
        fileName.textContent = '';
        label.classList.remove('is--hidden');
        file.classList.remove('is--active');
      });
    });
  }

  // main
  var main = document.querySelector('.main');
  var aboutVideo = document.querySelector('.about__bg > video');
  if (main && aboutVideo) {
    var changeColorInstant = function changeColorInstant(newColorValue) {
      var body = document.body;
      var originalTransition = body.style.transition;
      body.style.transition = 'none';
      body.style.setProperty('--page-color', newColorValue);
      requestAnimationFrame(function () {
        body.style.transition = originalTransition || '';
      });
    };
    var originalColor = '6,6,6';
    var newColor = '31,45,76';
    if (window.innerWidth >= 1024) {
      var observerOptions = {
        threshold: 0
      };
      var observer = new IntersectionObserver(function (entries) {
        entries.forEach(function (entry) {
          if (entry.isIntersecting) {
            changeColorInstant(originalColor);
          } else {
            changeColorInstant(newColor);
            if (aboutVideo && aboutVideo.paused) {
              aboutVideo.play()["catch"](function (err) {
                return console.error('Ошибка при воспроизведении видео:', err);
              });
            }
          }
        });
      }, observerOptions);
      observer.observe(main);
    } else {
      changeColorInstant(newColor);
    }
  }

  // about card showreel
  var aboutCardSubscribe = document.querySelector('.about-card-subscribe');
  var aboutCardSubscribeVideo = document.querySelector('.about-card-subscribe__bg video');
  if (aboutCardSubscribe && aboutCardSubscribeVideo) {
    aboutCardSubscribeVideo.pause();
    aboutCardSubscribe.addEventListener('mouseenter', function () {
      aboutCardSubscribeVideo.play();
    });
    aboutCardSubscribe.addEventListener('mouseleave', function () {
      aboutCardSubscribeVideo.pause();
    });
  }

  // about worlds
  gsap.registerPlugin(ScrollTrigger);
  var aboutWorlds = document.querySelector('.about-worlds');
  if (aboutWorlds) {
    var updateSlides = function updateSlides(activeIndex) {
      slides.forEach(function (slide, i) {
        if (i === activeIndex) {
          gsap.to(slide, {
            y: 0,
            opacity: 1,
            filter: "blur(0px)",
            duration: 0.3,
            ease: "power1.out"
          });
        } else if (i < activeIndex) {
          var step = activeIndex - i;
          var opacity = Math.max(0.1 - step * 0.02, 0.03);
          var blur = Math.min(2 + step * 0.5, 5);
          gsap.to(slide, {
            y: -60,
            opacity: opacity,
            filter: "blur(".concat(blur, "px)"),
            duration: 0.3,
            ease: "power1.out"
          });
        } else {
          var _step = i - activeIndex;
          var _opacity = Math.max(0.1 - _step * 0.02, 0.03);
          var _blur = Math.min(2 + _step * 0.5, 5);
          gsap.to(slide, {
            y: 60 * _step,
            opacity: _opacity,
            filter: "blur(".concat(_blur, "px)"),
            duration: 0.3,
            ease: "power1.out"
          });
        }
      });
    };
    var slides = gsap.utils.toArray('.about-worlds__item');
    var numSlides = slides.length;
    var slideDistance = 250;
    var totalScrollDistance = (numSlides - 1) * slideDistance + window.innerHeight;
    updateSlides(0);
    ScrollTrigger.create({
      trigger: ".about-worlds__wrap",
      start: "top top",
      end: "+=" + totalScrollDistance,
      pin: true,
      scrub: true,
      snap: {
        snapTo: 1 / (numSlides - 1),
        duration: 0.4,
        delay: 0,
        ease: "power1.inOut"
      },
      onUpdate: function onUpdate(self) {
        var newIndex = Math.round(self.progress * (numSlides - 1));
        updateSlides(newIndex);
      }
    });
  }

  // // research
  // gsap.utils.toArray(".research__item").forEach((card) => {
  //     gsap.from(card, {
  //       scrollTrigger: {
  //         trigger: card,
  //         start: "top 90%",
  //         toggleActions: "play none none none",
  //         scrub: 0.3, // небольшая задержка для более плавного связывания анимации со скроллом
  //         markers: true // для отладки; удалите после проверки
  //       },
  //       opacity: 0,
  //       y: 100,
  //       duration: 0.5,
  //       ease: "none" // линейное движение без замедлений
  //     });
  //   });

  // cooperation
  var cooperationDecor = document.querySelector('.cooperation__decor');
  var cooperationItem = document.querySelector('.cooperation__item');
  if (cooperationDecor) {
    gsap.to('.cooperation__decor', {
      y: -30,
      ease: "none",
      scrollTrigger: {
        trigger: '.cooperation__top',
        start: "top 20%",
        end: "bottom top",
        scrub: true
      }
    });
  }

  // if (cooperationItem) {
  //     gsap.utils.toArray(".cooperation__item").forEach((card) => {
  //         gsap.fromTo(card, 
  //             {
  //                 y: 50,
  //                 opacity: 0,
  //             },
  //             {
  //                 y: 0,
  //                 opacity: 1,
  //                 scrollTrigger: {
  //                     trigger: card,
  //                     start: "top 80%",
  //                     end: "top 30%",
  //                     scrub: true,
  //                     once: true,              // Связывает анимацию с прокруткой
  //                 },
  //             });
  //     });
  // }

  // feedback modal
  var feedbackModal = document.getElementById('feedback-modal');
  var feedbackModalTabs = document.querySelectorAll('.feedback-modal-tabs__item');
  var feedbackModalTabContents = document.querySelectorAll('.feedback-modal-tabs__holder');
  var feedbackModalOpenButtons = document.querySelectorAll('[data-feedback-tab]');
  var feedbackModalCloseButtons = document.querySelectorAll('.feedback-modal__close');
  function feedbackOpenModal(targetTab) {
    if (feedbackModal) {
      feedbackModal.classList.add('is--active');
      feedbackModalTabs.forEach(function (tab) {
        return tab.classList.remove('is--active');
      });
      feedbackModalTabContents.forEach(function (content) {
        return content.classList.remove('is--active');
      });
      if (targetTab !== null && feedbackModalTabs[targetTab]) {
        feedbackModalTabs[targetTab].classList.add('is--active');
        feedbackModalTabContents[targetTab].classList.add('is--active');
        feedbackModalTabs[targetTab].scrollIntoView({
          behavior: 'smooth',
          inline: 'nearest',
          block: 'nearest'
        });
      }
      bodyFixScroll(1);
    }
  }
  function feedbackCloseModal() {
    if (feedbackModal) {
      feedbackModal.classList.remove('is--active');
      bodyFixScroll();
    }
  }
  if (feedbackModalOpenButtons && feedbackModalTabs && feedbackModalCloseButtons) {
    feedbackModalOpenButtons.forEach(function (button) {
      button.addEventListener('click', function (event) {
        event.preventDefault();
        var targetTab = parseInt(button.dataset.feedbackTab, 10);
        feedbackOpenModal(targetTab);
      });
    });
    feedbackModalTabs.forEach(function (tab, index) {
      tab.addEventListener('click', function (event) {
        event.preventDefault();
        feedbackModalTabs.forEach(function (t) {
          return t.classList.remove('is--active');
        });
        feedbackModalTabContents.forEach(function (c) {
          return c.classList.remove('is--active');
        });
        tab.classList.add('is--active');
        feedbackModalTabContents[index].classList.add('is--active');
        tab.scrollIntoView({
          behavior: 'smooth',
          inline: 'nearest',
          block: 'nearest'
        });
      });
    });
    feedbackModalCloseButtons.forEach(function (button) {
      button.addEventListener('click', function (event) {
        event.preventDefault();
        feedbackCloseModal();
      });
    });
  }

  // popup image
  var popupImage = document.getElementById('popup-image');
  var popupImageImg = document.querySelector('.popup-image__img img');
  var popupImageTitle = document.querySelector('.popup-image__title');
  var popupImageDescription = document.querySelector('.popup-image__description');
  var popupImageClose = document.querySelector('.popup-image__close');
  var popupImageTrigger = document.querySelectorAll('.research-inner-details__img');
  if (popupImage && popupImageTrigger && popupImageClose) {
    popupImage.addEventListener('click', function (event) {
      if (event.target.classList.contains('popup-image') || event.target.classList.contains('popup-image__wrap')) {
        event.preventDefault();
        closeModal();
      }
    });
    popupImageTrigger.forEach(function (link) {
      link.addEventListener('click', function (event) {
        event.preventDefault();
        popupImageImg.src = link.href;
        popupImageTitle.textContent = link.dataset.title || '';
        popupImageDescription.innerHTML = link.dataset.description || '';
        popupImage.classList.add('is--active');
        bodyFixScroll(1);
      });
    });
    popupImageClose.addEventListener('click', closeModal);
  }
  function closeModal() {
    popupImage.classList.remove('is--active');
    bodyFixScroll();
    setTimeout(function () {
      popupImageImg.src = '';
      popupImageTitle.textContent = '';
      popupImageDescription.innerHTML = '';
    }, 100);
  }
});