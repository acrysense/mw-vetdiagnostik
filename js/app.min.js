"use strict";

document.addEventListener('DOMContentLoaded', function () {
  // lenis
  var lenis = new Lenis({
    lerp: 0.1,
    smooth: true
  });
  function raf(time) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }
  requestAnimationFrame(raf);

  // function's
  function bodyFixScroll(status) {
    var scrollPosition = 0;
    var paddingOffset = window.innerWidth - document.body.offsetWidth + 'px';
    var elementsFixed = document.querySelectorAll('.fixed');
    if (status) {
      document.body.classList.add('scroll-disabled');
      scrollPosition = window.pageYOffset;
      document.body.style.overflow = 'hidden';
      document.body.style.position = 'fixed';
      if (document.body.style.top) {
        document.body.style.top = document.body.style.top;
      } else {
        document.body.style.top = '-' + scrollPosition + 'px';
      }
      document.body.style.width = '100%';
      document.body.style.paddingRight = paddingOffset;
      if (elementsFixed) {
        elementsFixed.forEach(function (item) {
          item.style.marginRight = paddingOffset;
        });
      }
    } else {
      document.body.classList.remove('scroll-disabled');
      scrollPosition = Math.abs(parseInt(document.querySelector('body').style.top.replace('px', '')));
      document.body.style.removeProperty('overflow');
      document.body.style.removeProperty('position');
      document.body.style.removeProperty('top');
      document.body.style.removeProperty('width');
      document.body.style.removeProperty('padding-right');
      if (elementsFixed) {
        elementsFixed.forEach(function (item) {
          item.style.removeProperty('margin-right');
        });
      }
      window.scrollTo({
        top: !isNaN(scrollPosition) ? scrollPosition : 0,
        behavior: 'instant'
      });
    }
  }

  // checker
  var useItemChecker = function useItemChecker(els, onClickOutside) {
    var checkBodyClick = function checkBodyClick(e) {
      var currentEl = e.target;
      while (currentEl) {
        if (els.includes(currentEl)) break;
        currentEl = currentEl.parentNode;
      }
      if (!currentEl) {
        onClickOutside();
        removeBodyChecker();
      }
    };
    function setBodyChecker() {
      document.documentElement.addEventListener('click', checkBodyClick);
    }
    function removeBodyChecker() {
      document.documentElement.removeEventListener('click', checkBodyClick);
    }
    return {
      setBodyChecker: setBodyChecker,
      removeBodyChecker: removeBodyChecker
    };
  };

  // slides up/down/toggle
  var slideUpQna = function slideUpQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.transitionProperty = 'height, margin, padding';
    target.style.transitionDuration = duration + 'ms';
    target.style.height = target.offsetHeight + 'px';
    target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    if (target.previousElementSibling) {
      target.previousElementSibling.style.pointerEvents = 'none';
    }
    window.setTimeout(function () {
      target.style.display = 'none';
      target.style.removeProperty('height');
      target.style.removeProperty('padding-top');
      target.style.removeProperty('padding-bottom');
      target.style.removeProperty('margin-top');
      target.style.removeProperty('margin-bottom');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      if (target.previousElementSibling) {
        target.previousElementSibling.style.pointerEvents = 'auto';
      }
    }, duration);
    target.parentNode.classList.remove('is--open');
  };
  var slideDownQna = function slideDownQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.removeProperty('display');
    var display = window.getComputedStyle(target).display;
    if (display === 'none') display = 'block';
    target.style.display = display;
    var height = target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    target.offsetHeight;
    target.style.transitionProperty = "height, margin, padding";
    target.style.transitionDuration = duration + 'ms';
    target.style.height = height + 'px';
    target.style.removeProperty('padding-top');
    target.style.removeProperty('padding-bottom');
    target.style.removeProperty('margin-top');
    target.style.removeProperty('margin-bottom');
    if (target.previousElementSibling) {
      target.previousElementSibling.style.pointerEvents = 'none';
    }
    window.setTimeout(function () {
      target.style.removeProperty('height');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      if (target.previousElementSibling) {
        target.previousElementSibling.style.pointerEvents = 'auto';
      }
    }, duration);
    target.parentNode.classList.add('is--open');
  };

  // inputmask
  Inputmask().mask(document.querySelectorAll('input'));

  // gsap
  gsap.registerPlugin(ScrollTrigger);

  // textarea
  var allTexareas = document.querySelectorAll('textarea');
  if (allTexareas) {
    allTexareas.forEach(function (el) {
      el.style.height = el.setAttribute('style', 'height: ' + el.scrollHeight + 'px');
      el.classList.add('auto');
      el.addEventListener('input', function (e) {
        el.style.height = 'auto';
        el.style.height = el.scrollHeight + 'px';
      });
    });
  }

  // research
  var researchCards = document.querySelectorAll('.research-card');
  if (researchCards) {
    researchCards.forEach(function (card) {
      card.addEventListener('mouseenter', function () {
        var bgColor = card.getAttribute('data-bg-color');
        document.body.style.backgroundColor = bgColor;
        researchCards.forEach(function (otherCard) {
          if (otherCard !== card) {
            otherCard.classList.add('is--dimmed');
          }
        });
      });
      card.addEventListener('mouseleave', function () {
        document.body.style.removeProperty('background-color');
        researchCards.forEach(function (otherCard) {
          otherCard.classList.remove('is--dimmed');
        });
      });
    });
  }

  // heart
  var heartBtn = document.querySelectorAll('.c-heart__btn');
  if (heartBtn) {
    heartBtn.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (item.classList.contains('is--active')) {
          item.classList.remove('is--active');
        } else {
          item.classList.add('is--active');
        }
      });
    });
  }

  // new select
  if (document.querySelector('.select-box')) {
    // Функция закрытия одиночного селекта
    var closeAllSelects = function closeAllSelects() {
      document.querySelectorAll('.select-box__container').forEach(function (container) {
        container.classList.remove('is--active');
      });
      document.querySelectorAll('.select-box__selected').forEach(function (selected) {
        selected.classList.remove('is--active');
      });
    }; // Обработчик клика по заголовку селекта
    // Функция обновления мультиселекта – отвечает за обновление текста и отображение блока выбранных
    var updateMultiSelect = function updateMultiSelect(selectBox) {
      var selectedBox = selectBox.querySelector('.select-box__selected');
      var selectedPlaceholder = selectedBox.querySelector('.select-box__placeholder');
      var selectedValuesDisplay = selectedBox.querySelector('.select-box__values');
      var selectedSectionWrapper = selectBox.querySelector('.select-box__section--selected');
      var selectedSection = selectedSectionWrapper ? selectedSectionWrapper.querySelector('.select-box__wrap') : null;
      if (selectedSection) {
        var selectedOptions = selectedSection.querySelectorAll('.select-box__option');
        var values = Array.from(selectedOptions).map(function (el) {
          var valueElem = el.querySelector('.select-box__value');
          return valueElem ? valueElem.textContent.trim() : '';
        }).filter(function (val) {
          return val !== '';
        });
        selectedValuesDisplay.textContent = values.join(', ');
        if (values.length > 0) {
          selectedPlaceholder.classList.remove('is--active');
          selectedValuesDisplay.classList.add('is--active');
          selectedSectionWrapper.classList.add('is--active');
          selectedSectionWrapper.style.display = '';
        } else {
          selectedPlaceholder.classList.add('is--active');
          selectedValuesDisplay.classList.remove('is--active');
          selectedSectionWrapper.classList.remove('is--active');
          selectedSectionWrapper.style.display = 'none';
        }
      }
    }; // Обработчик поиска внутри селектбокса
    document.querySelectorAll('.select-box__selected').forEach(function (item) {
      var itemChecker = useItemChecker([item.parentNode, item], closeAllSelects);
      item.addEventListener('click', function () {
        var container = item.previousElementSibling;
        if (container.classList.contains('is--active')) {
          closeAllSelects();
        } else {
          closeAllSelects();
          container.classList.add('is--active');
          item.classList.add('is--active');
          itemChecker.setBodyChecker();
        }
      });
    });
    document.querySelectorAll('.select-box').forEach(function (selectBox) {
      var searchInput = selectBox.querySelector('.select-box__search-input');
      if (searchInput) {
        searchInput.addEventListener('input', function () {
          var query = searchInput.value.trim().toLowerCase();
          // Фильтруем обычные секции (не выбранных)
          selectBox.querySelectorAll('.select-box__section:not(.select-box__section--selected)').forEach(function (section) {
            var sectionMatch = false;
            section.querySelectorAll('.select-box__option').forEach(function (option) {
              var valueElem = option.querySelector('.select-box__value');
              var titleElem = option.querySelector('.select-box__title');
              var valueText = valueElem ? valueElem.textContent.toLowerCase() : '';
              var titleText = titleElem ? titleElem.textContent.toLowerCase() : '';
              if (valueText.indexOf(query) !== -1 || titleText.indexOf(query) !== -1) {
                option.style.display = '';
                sectionMatch = true;
              } else {
                option.style.display = 'none';
              }
            });
            section.style.display = sectionMatch ? '' : 'none';
          });
          // Для секции выбранных – запускаем обновление, чтобы при фильтре, если в ней нет опций, она скрылась
          var selectedSectionWrapper = selectBox.querySelector('.select-box__section--selected');
          if (selectedSectionWrapper) {
            // Не фильтруем опции внутри выбранных – они остаются видимыми, но если их нет, скрываем всю секцию
            updateMultiSelect(selectBox);
          }
        });
      }
    });

    // Обработчик опций для одиночного и мультиселекта
    document.querySelectorAll('.select-box').forEach(function (selectBox) {
      var isSingle = selectBox.classList.contains('select-box--single');
      var container = selectBox.querySelector('.select-box__container');
      var selectedBox = selectBox.querySelector('.select-box__selected');
      var selectedPlaceholder = selectedBox.querySelector('.select-box__placeholder');
      var selectedValuesDisplay = selectedBox.querySelector('.select-box__values');
      var selectedSectionWrapper = selectBox.querySelector('.select-box__section--selected');
      var selectedSection = selectedSectionWrapper ? selectedSectionWrapper.querySelector('.select-box__wrap') : null;
      var options = selectBox.querySelectorAll('.select-box__option');
      options.forEach(function (option) {
        var input = option.querySelector('input');
        var label = option.querySelector('.select-box__label');
        var optionText = isSingle ? label.querySelector('.select-box__title') ? label.querySelector('.select-box__title').textContent.trim() : label.textContent.trim() : option.querySelector('.select-box__value') ? option.querySelector('.select-box__value').textContent.trim() : label.textContent.trim();
        var clone;
        if (!isSingle && selectedSection) {
          clone = option.cloneNode(true);
          clone.setAttribute('data-id', input.id);
          // По клику по клону в секции выбранных снимаем выбор
          clone.addEventListener('click', function (e) {
            e.stopPropagation();
            input.checked = false;
            option.classList.remove('is--active');
            if (selectedSection.contains(clone)) {
              clone.remove();
            }
            updateMultiSelect(selectBox);
          });
        }
        option.addEventListener('click', function (event) {
          event.preventDefault();
          if (isSingle) {
            // Для одиночного селекта – сбрасываем и отмечаем выбранное, не трогая классы для опций
            options.forEach(function (opt) {
              opt.querySelector('input').checked = false;
            });
            input.checked = true;
            selectedValuesDisplay.textContent = optionText;
            selectedPlaceholder.classList.remove('is--active');
            selectedValuesDisplay.classList.add('is--active');
            closeAllSelects();
          } else {
            // Для мультиселекта – переключаем выбор
            if (input.checked) {
              input.checked = false;
              option.classList.remove('is--active');
              var selectedClone = selectedSection.querySelector("[data-id=\"".concat(input.id, "\"]"));
              if (selectedClone) {
                selectedClone.remove();
              }
            } else {
              input.checked = true;
              option.classList.add('is--active');
              if (!selectedSection.querySelector("[data-id=\"".concat(input.id, "\"]"))) {
                selectedSection.appendChild(clone);
              }
            }
            updateMultiSelect(selectBox);
          }
        });
      });

      // Первоначальное обновление для мультиселекта
      if (!isSingle && selectedSectionWrapper) {
        updateMultiSelect(selectBox);
      }
    });
  }

  // search
  var search = document.getElementById('search');
  var searchTrigger = document.querySelectorAll('.c-search__trigger');
  var searchClose = document.getElementById('search-close');
  if (search && searchTrigger && searchClose) {
    searchTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (search.classList.contains('is--active')) {
          search.classList.remove('is--active');
          bodyFixScroll(0);
        } else {
          search.classList.add('is--active');
          if (mobileMenu) {
            setTimeout(function () {
              if (mobileMenu.classList.contains('is--active')) {
                mobileMenuTrigger.classList.remove('is--active');
                mobileMenu.classList.remove('is--active');
              }
            }, 100);
          } else {
            bodyFixScroll(1);
          }
        }
      });
    });
    searchClose.addEventListener('click', function (event) {
      event.preventDefault();
      if (search.classList.contains('is--active')) {
        search.classList.remove('is--active');
        bodyFixScroll(0);
      }
    });
  }

  // mobile menu
  var mobileMenu = document.getElementById('menu');
  var mobileMenuTrigger = document.getElementById('hamburger-toggle');
  var mobileMenuClose = document.getElementById('menu-close');
  if (mobileMenu && mobileMenuTrigger && mobileMenuClose) {
    mobileMenuTrigger.addEventListener('click', function (event) {
      event.preventDefault();
      if (mobileMenu.classList.contains('is--active')) {
        mobileMenuTrigger.classList.remove('is--active');
        mobileMenu.classList.remove('is--active');
        bodyFixScroll(0);
      } else {
        mobileMenuTrigger.classList.add('is--active');
        mobileMenu.classList.add('is--active');
        bodyFixScroll(1);
      }
    });
    mobileMenuClose.addEventListener('click', function (event) {
      event.preventDefault();
      if (mobileMenu.classList.contains('is--active')) {
        mobileMenuTrigger.classList.remove('is--active');
        mobileMenu.classList.remove('is--active');
        bodyFixScroll(0);
      }
    });
  }

  // research inner accrdeon
  var accordeonTrigger = document.querySelectorAll('.research-inner__trigger');
  if (accordeonTrigger) {
    accordeonTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (!item.parentNode.classList.contains('is--open')) {
          slideDownQna(item.nextElementSibling);
        } else {
          slideUpQna(item.nextElementSibling);
        }
      });
    });
  }

  // input file
  var inputFile = document.querySelectorAll('.input-field__input[type="file"]');
  if (inputFile) {
    inputFile.forEach(function (input) {
      var parent = input.closest('.input-field');
      var label = parent.querySelector('.input-field__file-label');
      var file = parent.querySelector('.input-field__file');
      var fileName = parent.querySelector('.input-field__file-name');
      var resetButton = parent.querySelector('.input-field__reset');
      input.addEventListener('change', function () {
        if (this.files.length > 0) {
          fileName.textContent = this.files[0].name;
          label.classList.add('is--hidden');
          file.classList.add('is--active');
        } else {
          fileName.textContent = '';
          label.classList.remove('is--hidden');
          file.classList.remove('is--active');
        }
      });
      resetButton.addEventListener('click', function () {
        input.value = '';
        fileName.textContent = '';
        label.classList.remove('is--hidden');
        file.classList.remove('is--active');
      });
    });
  }

  // main
  // const main = document.querySelector('.main');
  // const aboutVideo = document.querySelector('.about__bg > video');

  // if (main && aboutVideo) {
  //     const originalColor = '6,6,6';
  //     const newColor = '31,45,76';

  //     function changeColorInstant(newColorValue) {
  //         const body = document.body;
  //         const originalTransition = body.style.transition;
  //         body.style.transition = 'none';
  //         body.style.setProperty('--page-color', newColorValue);
  //         requestAnimationFrame(() => {
  //             body.style.transition = originalTransition || '';
  //         });
  //     }

  //     if (window.innerWidth >= 1024) {
  //         const observerOptions = {
  //             threshold: 0
  //         };

  //         const observer = new IntersectionObserver((entries) => {
  //             entries.forEach(entry => {
  //                 if (entry.isIntersecting) {
  //                     changeColorInstant(originalColor);
  //                 } else {
  //                     changeColorInstant(newColor);
  //                     if (aboutVideo && aboutVideo.paused) {
  //                         aboutVideo.play().catch(err => console.error('Ошибка при воспроизведении видео:', err));
  //                     }
  //                 }
  //             });
  //         }, observerOptions);

  //         observer.observe(main);
  //     } else {
  //         changeColorInstant(newColor);
  //     }
  // }

  // about card showreel
  var aboutCardSubscribe = document.querySelector('.about-card-subscribe');
  var aboutCardSubscribeVideo = document.querySelector('.about-card-subscribe__bg video');
  if (aboutCardSubscribe && aboutCardSubscribeVideo) {
    aboutCardSubscribeVideo.pause();
    aboutCardSubscribe.addEventListener('mouseenter', function () {
      aboutCardSubscribeVideo.play();
    });
    aboutCardSubscribe.addEventListener('mouseleave', function () {
      aboutCardSubscribeVideo.pause();
    });
  }

  // gsap
  var cooperationDecor = gsap.utils.toArray('.cooperation__decor');
  var cooperationItem = gsap.utils.toArray('.cooperation__item');
  var researchCard = gsap.utils.toArray('.research__item');
  var articleshCard = gsap.utils.toArray('.articles__item');
  var aboutWorldsItem = gsap.utils.toArray('.about-worlds__item');
  var eventsCards = gsap.utils.toArray('.events__item');
  var aboutCards = gsap.utils.toArray('.about__item');

  // if (aboutWorlds) {
  //     const slides = gsap.utils.toArray('.about-worlds__item');
  //     const numSlides = slides.length;
  //     const slideDistance = 250;
  //     const totalScrollDistance = (numSlides - 1) * slideDistance + window.innerHeight;

  //     function updateSlides(activeIndex) {
  //         slides.forEach((slide, i) => {
  //             if (i === activeIndex) {
  //                 gsap.to(slide, {
  //                     y: 0,
  //                     opacity: 1,
  //                     filter: "blur(0px)",
  //                     duration: 0.3,
  //                     ease: "power1.out"
  //                 });
  //             } else if (i < activeIndex) {
  //                 const step = activeIndex - i;
  //                 const opacity = Math.max(0.1 - step * 0.02, 0.03);
  //                 const blur = Math.min(2 + step * 0.5, 5);
  //                 gsap.to(slide, {
  //                     y: -60,
  //                     opacity: opacity,
  //                     filter: `blur(${blur}px)`,
  //                     duration: 0.3,
  //                     ease: "power1.out"
  //                 });
  //             } else {
  //                 const step = i - activeIndex;
  //                 const opacity = Math.max(0.1 - step * 0.02, 0.03);
  //                 const blur = Math.min(2 + step * 0.5, 5);
  //                 gsap.to(slide, {
  //                     y: 60 * step,
  //                     opacity: opacity,
  //                     filter: `blur(${blur}px)`,
  //                     duration: 0.3,
  //                     ease: "power1.out"
  //                 });
  //             }
  //         });
  //     }

  //     updateSlides(0);

  //     ScrollTrigger.create({
  //         trigger: ".about-worlds__wrap",
  //         start: "top top",
  //         end: "+=" + totalScrollDistance,
  //         pin: true,
  //         scrub: true,
  //         snap: {
  //             snapTo: 1 / (numSlides - 1),
  //             duration: 0.4,
  //             delay: 0,
  //             ease: "power1.inOut"
  //         },
  //         onUpdate: self => {
  //             const newIndex = Math.round(self.progress * (numSlides - 1));
  //             updateSlides(newIndex);
  //         }
  //     });
  // }

  if (aboutCards.length > 0) {
    gsap.set(aboutCards, {
      y: 100,
      opacity: '0.03',
      filter: 'blur(10px)'
    });
    gsap.utils.toArray(aboutCards).forEach(function (item) {
      gsap.to(item, {
        y: 0,
        opacity: '1',
        filter: 'blur(0px)',
        ease: 'none',
        scrollTrigger: {
          trigger: item,
          start: 'top 80%'
        }
      });
    });
  }

  // if (eventsCards.length > 0) {
  //     gsap.set(eventsCards, { 
  //         y: 100,
  //         opacity: '0.03',
  //         filter: 'blur(10px)', 
  //     });

  //     gsap.utils.toArray(eventsCards).forEach(item => {
  //         gsap.to(item, {
  //             y: 0,
  //             opacity: '1',
  //             filter: 'blur(0px)',
  //             ease: 'none',
  //             scrollTrigger: {
  //                 trigger: item,
  //                 start: 'top 80%',
  //             }
  //         });
  //     });
  // }

  if (aboutWorldsItem.length > 0) {
    gsap.set(aboutWorldsItem, {
      opacity: 0.03,
      filter: 'blur(2.5px)'
    });
    gsap.utils.toArray(aboutWorldsItem).forEach(function (item) {
      gsap.to(item, {
        opacity: 1,
        filter: 'blur(0px)',
        ease: 'none',
        scrollTrigger: {
          trigger: item,
          start: 'top 80%',
          end: 'top 50%',
          scrub: true
        }
      });
    });
  }

  // if (cooperationDecor.length > 0) {
  //     gsap.utils.toArray(cooperationDecor).forEach(item => {
  //         gsap.to(item, {
  //             y: -30,
  //             ease: "none",
  //             scrollTrigger: {
  //                 trigger: cooperationDecor,
  //                 start: "top 20%",
  //                 end: "bottom top",
  //                 scrub: true,
  //             }
  //         });
  //     });
  // }

  // if (cooperationItem.length > 0) {
  //     gsap.set(cooperationItem, { 
  //         y: 100,
  //         // opacity: '0.03',
  //         // filter: 'blur(10px)',
  //     });

  //     gsap.utils.toArray(cooperationItem).forEach(item => {
  //         gsap.to(item, {
  //             // y: 0,
  //             // opacity: '1',
  //             // filter: 'blur(0px)',
  //             // ease: 'none',
  //             // scrollTrigger: {
  //             //     trigger: item,
  //             //     start: 'top 85%',
  //             // }
  //             y: 0,
  //             ease: "none",
  //             scrollTrigger: {
  //                 trigger: item,
  //                 start: "top center",
  //                 end: "bottom center",
  //                 scrub: true,
  //                 markers: true,
  //             }
  //         });
  //     });
  // }

  // if (researchCard.length > 0) {
  //     gsap.set(researchCard, { 
  //         y: 200,
  //     });

  //     // gsap.utils.toArray(researchCard).forEach(item => {
  //     //     gsap.to(item, {
  //     //         y: 0,
  //     //         filter: 'blur(0px)',
  //     //         scale: '1',
  //     //         ease: 'none',
  //     //         scrollTrigger: {
  //     //             trigger: item,
  //     //             start: 'top 85%',
  //     //         }
  //     //     });
  //     // });
  //     gsap.utils.toArray(researchCard).forEach(card => {
  //         gsap.to(card,
  //             { 
  //             //   y: -30, 
  //             //   ease: "none",
  //             //   scrollTrigger: {
  //             //     trigger: card,
  //             //     // Когда верх карточки достигнет 80% высоты окна – запускается анимация
  //             //     start: "top 70%",
  //             //     // Анимация закончится, когда низ карточки пройдет верх окна
  //             //     end: "+=150",
  //             //     scrub: true,
  //             //     markers: true, // Для отладки, можно отключить markers: false
  //                 //   }
  //                 y: 0,
  //                 ease: "none",
  //                 scrollTrigger: {
  //                     trigger: card,
  //                     start: "top-=30% center",
  //                     end: "bottom top",
  //                     scrub: true,
  //                     markers: true,
  //                 }
  //             }
  //         );
  //     });
  // }

  // if (articleshCard.length > 0) {
  //     // gsap.set(articleshCard, { 
  //     //     y: 150,
  //     //     opacity: '0.03',
  //     //     filter: 'blur(10px)',
  //     // });

  //     // gsap.utils.toArray(articleshCard).forEach(item => {
  //     //     gsap.to(item, {
  //     //         y: 0,
  //     //         opacity: '1',
  //     //         filter: 'blur(0px)',
  //     //         ease: 'none',
  //     //         scrollTrigger: {
  //     //             trigger: item,
  //     //             start: 'top 85%',
  //     //         }
  //     //     });
  //     // });
  //     gsap.utils.toArray(articleshCard).forEach(card => {
  //         gsap.fromTo(card,
  //             // Начальное состояние: немного ниже и менее заметная (можно добавить opacity)
  //             { y: 30 },
  //             // Конечное состояние: немного выше исходной позиции и с полной прозрачностью
  //             { 
  //               y: -50, 
  //               ease: "none",
  //               scrollTrigger: {
  //                 trigger: card,
  //                 // Когда верх карточки достигнет 80% высоты окна – запускается анимация
  //                 start: "top 70%",
  //                 // Анимация закончится, когда низ карточки пройдет верх окна
  //                 end: "bottom top",
  //                 scrub: true,
  //                 markers: true, // Для отладки, можно отключить markers: false
  //               }
  //             }
  //           );
  //     });
  // }

  // marquee
  var footerNavbarSplide = document.querySelector('.footer__navbar .splide');
  if (footerNavbarSplide) {
    var splide = new Splide(footerNavbarSplide, {
      type: 'loop',
      drag: false,
      focus: 'center',
      direction: 'rtl',
      gap: '116px',
      autoWidth: true,
      pagination: false,
      arrows: false,
      wheel: false,
      autoScroll: {
        speed: -0.5,
        pauseOnHover: false,
        pauseOnFocus: false
      },
      breakpoints: {
        1023: {
          gap: '110px'
        },
        743: {
          gap: '66px'
        }
      }
    });
    splide.mount(window.splide.Extensions);
  }

  // feedback modal
  var feedbackModal = document.getElementById('feedback-modal');
  var feedbackModalTabs = document.querySelectorAll('.feedback-modal-tabs__item');
  var feedbackModalTabContents = document.querySelectorAll('.feedback-modal-tabs__holder');
  var feedbackModalOpenButtons = document.querySelectorAll('[data-feedback-tab]');
  var feedbackModalCloseButtons = document.querySelectorAll('.feedback-modal__close');
  function feedbackOpenModal(targetTab) {
    if (feedbackModal) {
      feedbackModal.classList.add('is--active');
      feedbackModalTabs.forEach(function (tab) {
        return tab.classList.remove('is--active');
      });
      feedbackModalTabContents.forEach(function (content) {
        return content.classList.remove('is--active');
      });
      if (targetTab !== null && feedbackModalTabs[targetTab]) {
        feedbackModalTabs[targetTab].classList.add('is--active');
        feedbackModalTabContents[targetTab].classList.add('is--active');
        feedbackModalTabs[targetTab].scrollIntoView({
          behavior: 'smooth',
          inline: 'nearest',
          block: 'nearest'
        });
      }
      bodyFixScroll(1);
    }
  }
  function feedbackCloseModal() {
    if (feedbackModal) {
      feedbackModal.classList.remove('is--active');
      bodyFixScroll();
    }
  }
  if (feedbackModalOpenButtons && feedbackModalTabs && feedbackModalCloseButtons) {
    feedbackModalOpenButtons.forEach(function (button) {
      button.addEventListener('click', function (event) {
        event.preventDefault();
        var targetTab = parseInt(button.dataset.feedbackTab, 10);
        feedbackOpenModal(targetTab);
      });
    });
    feedbackModalTabs.forEach(function (tab, index) {
      tab.addEventListener('click', function (event) {
        event.preventDefault();
        feedbackModalTabs.forEach(function (t) {
          return t.classList.remove('is--active');
        });
        feedbackModalTabContents.forEach(function (c) {
          return c.classList.remove('is--active');
        });
        tab.classList.add('is--active');
        feedbackModalTabContents[index].classList.add('is--active');
        tab.scrollIntoView({
          behavior: 'smooth',
          inline: 'nearest',
          block: 'nearest'
        });
      });
    });
    feedbackModalCloseButtons.forEach(function (button) {
      button.addEventListener('click', function (event) {
        event.preventDefault();
        feedbackCloseModal();
      });
    });
  }

  // popup image
  var popupImage = document.getElementById('popup-image');
  var popupImageImg = document.querySelector('.popup-image__img img');
  var popupImageTitle = document.querySelector('.popup-image__title');
  var popupImageDescription = document.querySelector('.popup-image__description');
  var popupImageClose = document.querySelector('.popup-image__close');
  var popupImageTrigger = document.querySelectorAll('.research-inner-details__img');
  if (popupImage && popupImageTrigger && popupImageClose) {
    popupImage.addEventListener('click', function (event) {
      if (event.target.classList.contains('popup-image') || event.target.classList.contains('popup-image__wrap')) {
        event.preventDefault();
        closeModal();
      }
    });
    popupImageTrigger.forEach(function (link) {
      link.addEventListener('click', function (event) {
        event.preventDefault();
        popupImageImg.src = link.href;
        popupImageTitle.textContent = link.dataset.title || '';
        popupImageDescription.innerHTML = link.dataset.description || '';
        popupImage.classList.add('is--active');
        bodyFixScroll(1);
      });
    });
    popupImageClose.addEventListener('click', closeModal);
  }
  function closeModal() {
    popupImage.classList.remove('is--active');
    bodyFixScroll();
    setTimeout(function () {
      popupImageImg.src = '';
      popupImageTitle.textContent = '';
      popupImageDescription.innerHTML = '';
    }, 100);
  }

  // 
  var section = document.querySelector('.about');
  var video = section.querySelector('.about__bg video');
  function playVideoFromStart() {
    video.currentTime = 0;
    video.play();
  }

  // Альтернативный вариант: если секция не имеет собственного скролла, а прокрутка всего окна
  window.addEventListener('scroll', function () {
    var rect = section.getBoundingClientRect();

    // Если верх секции ушёл выше окна более чем на 100px
    if (rect.top <= -100) {
      video.closest('.about__bg').classList.add('is--hidden');
    } else {
      video.closest('.about__bg').classList.remove('is--hidden');
    }
  });

  // microscope
  var canvasMain = document.getElementById('canvas-container');
  function updateCanvasSize() {
    var ratio = 1440 / 770; // требуемое соотношение сторон (~1.87)
    var viewportHeight = window.innerHeight;
    var width = window.innerWidth; // начинаем с ширины окна
    var computedHeight = width / ratio; // высота, исходя из пропорций

    // Если вычисленная высота меньше, чем высота экрана, принудительно устанавливаем высоту 100vh
    if (computedHeight < viewportHeight) {
      computedHeight = viewportHeight;
      width = computedHeight * ratio;
    }

    // Устанавливаем размер рендера (это размер фактической canvas)
    // renderer.setSize(width, computedHeight);

    // Обновляем размеры контейнера (если он используется для CSS)
    var container = document.getElementById("canvas-container");
    container.style.width = width + "px";
    container.style.height = computedHeight + "px";
  }
  updateCanvasSize();
  function getFinalTransform() {
    var finalObjPos, finalObjEuler;
    var currentWidth = window.innerWidth;
    if (currentWidth >= 1024) {
      finalObjPos = new THREE.Vector3(13, -1.1, 0.55);
      finalObjEuler = new THREE.Euler(THREE.MathUtils.degToRad(21), THREE.MathUtils.degToRad(38), THREE.MathUtils.degToRad(-17), "XYZ");
    } else if (currentWidth <= 1023 && currentWidth >= 744) {
      finalObjPos = new THREE.Vector3(13, -1.1, 0.55);
      finalObjEuler = new THREE.Euler(THREE.MathUtils.degToRad(21), THREE.MathUtils.degToRad(38), THREE.MathUtils.degToRad(-17), "XYZ");
    } else {
      finalObjPos = new THREE.Vector3(13, -1.1, 0.55);
      finalObjEuler = new THREE.Euler(THREE.MathUtils.degToRad(21), THREE.MathUtils.degToRad(38), THREE.MathUtils.degToRad(-17), "XYZ");
    }
    return {
      pos: finalObjPos,
      quat: new THREE.Quaternion().setFromEuler(finalObjEuler)
    };
  }
  if (canvasMain) {
    var monitorFPS = function monitorFPS() {
      var now = performance.now();
      frames++;
      if (now - lastTime >= 1000) {
        var fps = frames * 1000 / (now - lastTime);
        // Если FPS низкий, например, ниже 20, временно снизить pixelRatio до 1.
        if (fps < 20) {
          desiredPixelRatio = 1;
        } else {
          desiredPixelRatio = Math.min(window.devicePixelRatio, 2);
        }
        renderer.setPixelRatio(desiredPixelRatio);
        frames = 0;
        lastTime = now;
      }
      requestAnimationFrame(monitorFPS);
    };
    var animate = function animate() {
      requestAnimationFrame(animate);
      renderer.render(scene, embeddedCamera);
    };
    if (window.innerWidth >= 1024) {
      if (window.innerHeight > canvasMain.offsetHeight) {
        canvasMain.classList.add('is--bottom');
      } else {
        canvasMain.classList.remove('is--bottom');
      }
    }
    var scene = new THREE.Scene();
    var textureLoader = new THREE.TextureLoader();
    textureLoader.setPath('scope/');
    textureLoader.load('scope.png', function (texture) {
      texture.mapping = THREE.EquirectangularReflectionMapping;
      scene.environment = texture;
    });

    // create render
    var renderer = new THREE.WebGLRenderer({
      antialias: false,
      alpha: true,
      powerPreference: "high-performance"
    });
    renderer.setClearColor(0x000000, 0); // 0 означает полностью прозрачный фон

    renderer.setSize(canvasMain.clientWidth, canvasMain.clientHeight);
    var desiredPixelRatio = Math.min(window.devicePixelRatio, 2);
    renderer.setPixelRatio(desiredPixelRatio);
    var lastTime = performance.now();
    var frames = 0;
    monitorFPS();
    renderer.outputEncoding = THREE.sRGBEncoding;
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 1.0;
    renderer.shadowMap.enabled = false;
    canvasMain.appendChild(renderer.domElement);

    // settings GLTFLoader and DRACOLoader
    var loader = new THREE.GLTFLoader();
    loader.setPath('scope/');
    var dracoLoader = new THREE.DRACOLoader();
    dracoLoader.setDecoderPath('https://unpkg.com/three@0.128.0/examples/js/libs/draco/gltf/');
    loader.setDRACOLoader(dracoLoader);

    // Если в вашей сцене уже есть, например, directionalLight:
    // const directionalLight = new THREE.DirectionalLight(0xffffff, 1); // исходная интенсивность 1
    // directionalLight.position.set(5, 10, 7.5);
    // scene.add(directionalLight);

    // Добавляем дополнительное равномерное освещение:
    var extraAmbient = new THREE.AmbientLight(0xffffff, 0.6); // интенсивность 0.8 (подберите нужное значение)
    scene.add(extraAmbient);

    // Если хотите просто увеличить яркость всей сцены, можно изменить экспозицию рендера:
    // renderer.toneMappingExposure = 1.5; // увеличьте значение для большей яркости

    // Создаём PointLight с белым цветом (0xffffff) и заданной интенсивностью
    var pointLight = new THREE.PointLight(0xffffff, 1.41);

    // Устанавливаем координаты источника света:
    pointLight.position.set(3.015, 3.701, 1.585);

    // Добавляем источник света в сцену
    scene.add(pointLight);
    var microscope;
    var embeddedCamera;

    // let modelFile = window.innerWidth <= 1023 ? 'mobile.glb' : 'scope.glb';
    var modelFile = window.innerWidth <= 1023 ? 'scope.glb' : 'scope.glb';
    loader.load(modelFile, function (gltf) {
      microscope = gltf.scene;
      scene.add(microscope);
      if (window.innerWidth <= 743) {
        // Если мобильное устройство (например, ширина меньше 768px),
        // задаем уменьшенный масштаб
        microscope.scale.set(0.8, 0.8, 0.8);
      } else if (window.innerWidth <= 1023 && window.innerWidth >= 744) {
        microscope.scale.set(0.8, 0.8, 0.8);
      } else {
        // Для остальных устройств оставляем масштаб 1
        microscope.scale.set(1, 1, 1);
      }
      scene.traverse(function (child) {
        if (child.isMesh) {
          if (child.material.normalMap) {
            child.material.normalMap = null;
            child.material.needsUpdate = true;
          }
        }
      });
      if (gltf.cameras && gltf.cameras.length > 0) {
        embeddedCamera = gltf.cameras[0];
      }
      scene.add(embeddedCamera);

      // --- Анимация объекта (микроскопа) ---
      // Сохраняем начальную трансформацию объекта
      var initialObjPos = microscope.position.clone();
      var initialObjQuat = microscope.quaternion.clone();

      // Задаем конечное состояние объекта, взятое из Three.js Editor (мировые координаты)
      // Пример: позиция (13, -1.1, 0.55)
      // и поворот (Euler: 21°, 38°, -17°) в порядке "XYZ" (переводим в радианы)
      // const finalObjPos = new THREE.Vector3(13, -1.1, 0.55);
      // const finalObjEuler = new THREE.Euler(
      //     THREE.MathUtils.degToRad(21), 
      //     THREE.MathUtils.degToRad(38), 
      //     THREE.MathUtils.degToRad(-17),
      //     "XYZ"
      // );
      // const finalObjQuat = new THREE.Quaternion().setFromEuler(finalObjEuler);

      var _getFinalTransform = getFinalTransform(),
        finalObjPos = _getFinalTransform.pos,
        finalObjQuat = _getFinalTransform.quat;
      gsap.registerPlugin(ScrollTrigger);
      gsap.registerPlugin(ScrollToPlugin);
      var autoScrolling = false;
      var tl = gsap.timeline({
        scrollTrigger: {
          trigger: ".scroll-container",
          start: "top top",
          end: function end() {
            return "+=" + window.innerHeight;
          },
          scrub: true
          // markers: true,
        },

        onUpdate: function onUpdate() {
          var progress = tl.progress();
          var st = this.scrollTrigger; // получаем экземпляр ScrollTrigger
          // Пример использования: логируем направление скролла:
          // console.log("Scroll direction:", st.direction);

          // if (st.direction < 0 && !autoScrolling) {
          //     autoScrolling = true;
          //     tl.scrollTrigger.disable();
          //     console.log('to top')
          //     // gsap.to(tl, {
          //     //     progress: 0,
          //     //     duration: 0.5,
          //     //     ease: "power1.out"
          //     // });
          //     // gsap.to(window, {
          //     //     duration: 0.5,
          //     //     scrollTo: { y: 0 },
          //     //     ease: "power1.out",
          //     //     onComplete: () => {
          //     //       tl.scrollTrigger.enable();
          //     //       autoScrolling = false;
          //     //     }
          //     // });
          // }

          // console.log(progress)
          if (progress <= 0.3) {
            var subProgress = progress / 0.3;
            microscope.position.lerpVectors(initialObjPos, finalObjPos, subProgress);
            microscope.quaternion.slerpQuaternions(initialObjQuat, finalObjQuat, subProgress);
          } else if (progress >= 0.8) {
            var _subProgress = (progress - 0.8) / 0.2;
            microscope.scale.lerpVectors(new THREE.Vector3(1, 1, 1), new THREE.Vector3(1.5, 1.5, 1.5), _subProgress);
            var furtherPos = finalObjPos.clone().add(new THREE.Vector3(13, -0.9, 0.95));
            microscope.position.lerpVectors(finalObjPos, furtherPos, _subProgress);
          }
          // console.log("tl.duration():", tl.duration());
        },

        onComplete: function onComplete() {
          // console.log("Анимация завершена – запускаем видео");
          playVideoFromStart();
        }
        // onEnterBack: () => {
        //     // console.log('back')
        //     // Когда прокрутка идёт вверх и триггер покидается с начала,
        //     // автоматическая анимация сбрасывает timeline в начало (progress: 0)
        //     gsap.to(tl, {
        //         progress: 0,
        //         duration: 0.5,
        //         ease: "power1.out"
        //     });
        // }
      });

      tl.to(".main__wrap", {
        duration: 0.3,
        opacity: 0,
        filter: "blur(5px)",
        ease: "none"
      }, 0);
      tl.addLabel("endPhase1", 0.3);
      tl.to(".advantages__item", {
        duration: 0.06666666666,
        opacity: 1,
        y: 0,
        ease: "none",
        stagger: 0.06666666666
      }, "phase1End");
      tl.addLabel("endPhase2", 0.6);
      tl.to(".advantages", {
        duration: 0.1,
        opacity: 0,
        filter: 'blur(5px)',
        ease: "none"
      }, "endPhase2");
      tl.addLabel("endPhase3", 0.85);
      tl.to(".main", {
        duration: 0.05,
        opacity: 0,
        filter: "blur(5px)",
        ease: "none"
      }, "endPhase3");
      tl.to({}, {
        duration: 0.1
      });
      animate();
    }, undefined, function (error) {
      console.error("Ошибка загрузки модели:", error);
    });
    window.addEventListener('resize', function () {
      var width = window.innerWidth;
      renderer.setSize(canvasMain.clientWidth, canvasMain.clientHeight);
    });
  }

  // tech bg

  lottie.loadAnimation({
    container: document.querySelector('.main__bg'),
    // контейнер для анимации
    renderer: 'svg',
    // варианты: 'svg', 'canvas', 'html'
    loop: true,
    // включение зацикливания
    autoplay: true,
    // автозапуск анимации
    path: 'tech-bg.json' // путь к JSON файлу анимации
  });
});